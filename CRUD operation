
from fastapi import FastAPI, Body, HTTPException, status
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from bson.objectid import ObjectId

from .database import (
    student_collection,
    student_helper
)
from .schemas import (
    StudentSchema,
    UpdateStudentModel
)

app = FastAPI()

@app.post("/", response_description="Add new student", response_model=StudentSchema)

async def create_student(student: StudentSchema = Body(...)):
    student = jsonable_encoder(student)
    new_student = await student_collection.insert_one(student)
    created_student = await student_collection.find_one({"_id": new_student.inserted_id})
    return JSONResponse(status_code=status.HTTP_201_CREATED, content=student_helper(created_student))

@app.get("/", response_description="List all students")

async def list_students():
    students = []
    async for student in student_collection.find():
        students.append(student_helper(student))
    return students

@app.get("/{id}", response_description="Get a single student", response_model=StudentSchema)

async def show_student(id: str):
    if (student := await student_collection.find_one({"_id": ObjectId(id)})) is not None:
        return student_helper(student)
    raise HTTPException(status_code=404, detail=f"Student {id} not found")

@app.put("/{id}", response_description="Update a student", response_model=StudentSchema)

async def update_student(id: str, student: UpdateStudentModel = Body(...)):
    student = {k: v for k, v in student.dict().items() if v is not None}
    if len(student) >= 1:
        update_result = await student_collection.update_one({"_id": ObjectId(id)}, {"$set": student})
        if update_result.modified_count == 1:
            if (updated_student := await student_collection.find_one({"_id": ObjectId(id)})) is not None:
                return student_helper(updated_student)
    if (existing_student := await student_collection.find_one({"_id": ObjectId(id)})) is not None:
        return student_helper(existing_student)
    raise HTTPException(status_code=404, detail=f"Student {id} not found")

@app.delete("/{id}", response_description="Delete a student")

async def delete_student(id: str):
    delete_result = await student_collection.delete_one({"_id": ObjectId(id)})
    if delete_result.deleted_count == 1:
        return JSONResponse(status_code=status.HTTP_204_NO_CONTENT)
    raise HTTPException(status_code=404, detail=f"Student {id} not found")
